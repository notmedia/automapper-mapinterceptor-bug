import { Injectable } from '@nestjs/common';
import { ObjectType, Field } from '@nestjs/graphql';
import { mapFrom } from '@automapper/core';
import { AutomapperProfile, InjectMapper } from '@automapper/nestjs';
import { AutoMap } from '@automapper/classes';
import { createMetadataMap } from '@automapper/pojos';
import type { Mapper } from '@automapper/types';

// Represents a user in Database (in my case generated by Prisma).
export class UserInDB {
  login: string;

  password: string;
}

// Represents a user on backend side.
@ObjectType({ isAbstract: true })
export class User {
  @Field()
  username: string;

  @Field()
  @AutoMap()
  password: string;
}

createMetadataMap<User>('User', {
  username: String,
  password: String,
});

createMetadataMap<UserInDB>('UserInDB', 'User', {
  password: String,
});

// Represents the outuput user dto.
@ObjectType()
export class UserDto extends User {}

@Injectable()
export class UserProfile extends AutomapperProfile {
  constructor(@InjectMapper('classes') mapper: Mapper) {
    super(mapper);
  }

  mapProfile() {
    return (mapper: Mapper) => {
      mapper.createMap(User, UserDto).forMember(
        (destination) => destination.username,
        mapFrom((source) => {
          console.log('Map User to UserDTO');
          return source.username;
        }),
      );
    };
  }
}

@Injectable()
export class UserInDBProfile extends AutomapperProfile {
  constructor(@InjectMapper('pojos') mapper: Mapper) {
    super(mapper);
  }

  mapProfile() {
    return (mapper: Mapper) => {
      mapper.createMap<UserInDB, User>('UserInDB', 'User').forMember(
        (destination) => destination.username,
        mapFrom((source) => {
          console.log('Map UserInDB to User');
          return source.login;
        }),
      );
    };
  }
}
